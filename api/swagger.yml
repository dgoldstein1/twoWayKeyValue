openapi: 3.0.0
info:
  version: '0.1.0'
  title: 'Two Way Key Map Store'
  description: 'Fast and Portable Value -> Key and Key -> Value lookups'
# Added by API Auto Mocking Plugin
servers:
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/dgoldstein1/twoWayKeyValue/0.1.0

paths:
  /entry:
    post:
      summary: Adds a key:value entry. Keys and values must be unique.
      requestBody:
        required: true
        content:
          application/json:
              schema:
                $ref: '#/components/schemas/KeyValueEntry'
      responses:
        '200':
          description: A entry in the database.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyValueEntry'

        '500':
          description: Value must be unique.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
                
    get:
      summary: Retrieves entry from the DB using a key or value.
      parameters:
        - in: query
          name: key
          schema:
            type: string
          required: true
          description: key of the entry to retrieve
        - in: query
          name: value
          schema:
            type: number
          required: true
          description: value of the entry to retrieve      
          
      responses:
        '200':
          description: An entry in the database
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyValueEntry'

        '404':
          description: entry does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

        '500':
          description: Value must be unique.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'


  /metrics:
    get:
      summary: Prometheus Metrics.
      responses:
        '200':
          description: Prometheus metrics. For more information see [data model](https://prometheus.io/docs/concepts/data_model/).
        '500':
          description: An error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /save:
    get:
      summary: Streams underlying badgerDB file. Note that this endpoint can take 1+ minutes.
      responses:
        '200':
          description: File stream of graph as a [Badger DB file](https://github.com/dgraph-io/badger).
        '500':
          description: An error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    KeyValueEntry:
      type: object
      required:
        - key
        - value
      properties:
        key:
          type: string
        value:
              type: number
    EdgesResponse:
      type: object
      properties:
        neighborsAdded:
          description: new neighbors added to the current node (which were not currently there)
          type: array
          items:
            type: string
    Error:
      type: object
      properties:
        code:
          type: integer
          description: The code of the error.
        error:
          type: string
          description: Explanation of the error.